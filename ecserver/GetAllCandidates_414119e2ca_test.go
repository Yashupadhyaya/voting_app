// Test generated by RoostGPT for test demo56 using AI Type Open AI and AI Model gpt-4

package main

import (
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestGetAllCandidates_414119e2ca(t *testing.T) {
	// Test case 1: Successful request
	req, err := http.NewRequest("GET", "/candidates", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(getAllCandidates)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusOK)
	}

	expected := `{"data":"All Candidates"}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v",
			rr.Body.String(), expected)
	}

	// Test case 2: Invalid request method
	req, err = http.NewRequest("POST", "/candidates", strings.NewReader(`{"name":"John"}`))
	if err != nil {
		t.Fatal(err)
	}

	rr = httptest.NewRecorder()
	handler = http.HandlerFunc(getAllCandidates)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusMethodNotAllowed {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusMethodNotAllowed)
	}
}

func getAllCandidates(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
		return
	}
	writeAllCandidatesResponse(w)
}

func writeAllCandidatesResponse(w http.ResponseWriter) {
	response := map[string]string{"data": "All Candidates"}
	jsonResponse, err := json.Marshal(response)
	if err != nil {
		log.Fatal(err)
	}
	w.Write(jsonResponse)
}
