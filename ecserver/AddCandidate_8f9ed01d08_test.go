// Test generated by RoostGPT for test demo56 using AI Type Open AI and AI Model gpt-4

package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

var candidates = []*Candidate{
	{
		Name:     "John Doe",
		ImageUrl: "http://example.com/john.jpg",
	},
	{
		Name:     "Jane Doe",
		ImageUrl: "http://example.com/jane.jpg",
	},
}

func TestAddCandidate_8f9ed01d08(t *testing.T) {
	t.Run("TestAddCandidate_NewCandidate", func(t *testing.T) {
		newCandidate := &Candidate{
			Name:     "New Candidate",
			ImageUrl: "http://example.com/new.jpg",
		}
		jsonCandidate, _ := json.Marshal(newCandidate)
		request, _ := http.NewRequest(http.MethodPost, "/add", bytes.NewBuffer(jsonCandidate))
		response := httptest.NewRecorder()

		addCandidate(response, request)

		if response.Code != http.StatusOK {
			t.Errorf("Expected status OK, got '%v'", response.Code)
		}

		found := false
		for _, candidate := range candidates {
			if candidate.Name == newCandidate.Name {
				found = true
				break
			}
		}

		if !found {
			t.Error("New candidate was not added")
		} else {
			t.Log("New candidate was added successfully")
		}
	})

	t.Run("TestAddCandidate_ExistingCandidate", func(t *testing.T) {
		existingCandidate := &Candidate{
			Name:     "John Doe",
			ImageUrl: "http://example.com/updated_john.jpg",
		}
		jsonCandidate, _ := json.Marshal(existingCandidate)
		request, _ := http.NewRequest(http.MethodPost, "/add", bytes.NewBuffer(jsonCandidate))
		response := httptest.NewRecorder()

		addCandidate(response, request)

		if response.Code != http.StatusOK {
			t.Errorf("Expected status OK, got '%v'", response.Code)
		}

		for _, candidate := range candidates {
			if candidate.Name == existingCandidate.Name {
				if candidate.ImageUrl != existingCandidate.ImageUrl {
					t.Errorf("Image URL was not updated for existing candidate")
				} else {
					t.Log("Existing candidate was updated successfully")
				}
				break
			}
		}
	})
}
